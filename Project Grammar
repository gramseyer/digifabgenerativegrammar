Project Grammar

Essentially we want to represent the location of the head and the direction of the head in 3d space
series of statements 
push onto stack
pop off of stack
statement : motion of the head, toggle add or subtract , push on off stack, 
move x y z r: where x, y, z, r are all functions of t

<program> : <define>* <statement>
          ;

<define> : "(" "DEFINE" <identifier> "(" <param>* ")" <statement> ")" ";"
         ;

<param> : <identifier>
        ;

<statement> : MOVE <expr> <expr> <expr> <expr> ";" <statement>                  # x y z r(radius) <special param is "t">
            | "[" <statement> "]" ";" <statement>                               # Stack push/pop
            | "{" <identifier> <param>* "}" ";" <statement>                     # Function application
            | "IF" <expr> "THEN" <statement> "ELSE" <statement> ";" <statement> # Conditional
            | "ROTATEX" <expr> ";" <statement>                                  # Rotation of direction of motion.
            | "ROTATEY" <expr> ";" <statement>                                  # Relative to current direction of motion.
            | "ROTATEZ" <expr> ";" <statement>
            | "ERASE" ";" <statement>                                           # Set head to erase as it moves.
            | "DRAW" ";" <statement>                                            # Set head to draw as it moves.
            | "FREEMOVE" ";" <statement>                                        # Set head to do nothing as it moves.
            | <perturb> <statement>
            |
            ;

Perturb : "HOLLOW" <expr> <expr> <statement> ";"                                # Hollow the geometry generated by the statement.  Wall thickness
                                                                                # is the expressions (first is radius of inside subtraction for a draw motion,
                                                                                # second is radius of inside addition for an erase motion)
        | "INVERT" <statement> ";"                                              # draw <-> erase in the geometry generated by the statement.
        ;


#Top level expressions are always encased in parentheses.
<expr> : <expr> + <expr> | <expr> - <expr> | <expr> *  <expr> | <expr> / <expr> # With appropriate parsing to ensure proper associativity
<expr> : <identifier> | <num> | <identifier> <expr>* # variables, constants, or math function applications.

<identifier> : [a-z][a-zA-Z]*